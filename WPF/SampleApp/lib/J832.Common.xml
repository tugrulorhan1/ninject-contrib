<?xml version="1.0"?>
<doc>
    <assembly>
        <name>J832.Common</name>
    </assembly>
    <members>
        <member name="T:J832.Common.DBUtil">
            <summary>
                Utility classes for dealing with databases.
            </summary>
        </member>
        <member name="M:J832.Common.DBUtil.CreateSqlCommandWithParameters(System.String,System.Object[])">
            <summary>
                Creates a SQL command from a command format string and
                parameters to avoid SQL injection attacks.
            </summary>
            <param name="commandFormatString">
                SQL command string with format substitution points for
                parameters.
            </param>
            <param name="parameters">Parameters to substitute into the SQL command string.</param>
            <returns><see cref="T:System.Data.SqlClient.SqlCommand"/> using parameters.</returns>
        </member>
        <member name="T:J832.Common.LockHelper">
            <summary>
                Provides services of <see cref="T:System.Threading.Monitor"/>, but while allowing better debugging of deadlocks.
            </summary>
        </member>
        <member name="M:J832.Common.LockHelper.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:J832.Common.LockHelper"/>.
            </summary>
            <param name="name">The name to give the helper. Cannot be null or empty.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="name"/> is empty.</exception>
        </member>
        <member name="M:J832.Common.LockHelper.GetLock">
            <summary>
                Aquires the lock.
            </summary>
            <returns>An <see cref="T:System.IDisposable"/> that can be used in a C# 'lock' block.</returns>
            <example><code>
            using(lockHelper.GetLock()
            {
                //do work here
            }</code></example>
        </member>
        <member name="M:J832.Common.LockHelper.Pulse">
            <summary>
                Proxy for the <see cref="M:System.Threading.Monitor.Pulse(System.Object)"/> method on the current instance.
            </summary>
        </member>
        <member name="M:J832.Common.LockHelper.Wait">
            <summary>
                Proxy for the <see cref="M:System.Threading.Monitor.Wait(System.Object)"/> method on the current instance.
            </summary>
        </member>
        <member name="M:J832.Common.LockHelper.CheckAccess">
            <summary>
                Check to see if the calling thread hold this lock on this <see cref="T:J832.Common.LockHelper"/>.
            </summary>
            <returns>true if it holds the lock; otherwies, false.</returns>
        </member>
        <member name="M:J832.Common.LockHelper.VerifyAccess">
            <summary>
                Throws an exception if <see cref="M:J832.Common.LockHelper.CheckAccess"/> would returns false.
            </summary>
            <exception cref="T:System.Exception">If <see cref="M:J832.Common.LockHelper.CheckAccess"/> would returns false.</exception>
        </member>
        <member name="T:J832.Common.Extensions">
            <summary>
                Contains general purpose extention methods.
            </summary>
        </member>
        <member name="M:J832.Common.Extensions.AllUnique``1(System.Collections.Generic.IList{``0})">
            <summary>
                Returns true if all items in the list are unique using
                <see cref="P:System.Collections.Generic.EqualityComparer`1.Default">EqualityComparer&lt;T&gt;.Default</see>.
            </summary>
            <exception cref="T:System.ArgumentNullException">if <param name="source"/> is null.</exception>
        </member>
        <member name="M:J832.Common.Extensions.TrueForAllPairs``1(System.Collections.Generic.IList{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
                Returns true if <paramref name="compare"/> returns
                true for every pair of items in <paramref name="source"/>.
            </summary>
        </member>
        <member name="M:J832.Common.Extensions.TrueForAllAdjacentPairs``1(System.Collections.Generic.IList{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
                Returns true if <paramref name="compare"/> returns true of every
                adjacent pair of items in the <paramref name="source"/>.
            </summary>
            <remarks>
            <para>
                If there are n items in the collection, n-1 comparisons are done. 
            </para>
            <para>
                Every valid [i] and [i+1] pair are passed into <paramref name="compare"/>.
            </para>
            <para>
                If <paramref name="source"/> has 0 or 1 items, true is returned. 
            </para>
            </remarks>
        </member>
        <member name="M:J832.Common.Extensions.AllNotNullOrEmpty(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Returns true if all of the items in <paramref name="source"/> are not 
                null or empty.
            </summary>
            <exception cref="T:System.ArgumentNullException">if <param name="source"/> is null.</exception>
        </member>
        <member name="M:J832.Common.Extensions.AllExistIn``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns true if all items in <paramref name="source"/> exist
                in <paramref name="set"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">if <param name="source"/> or <param name="set"/> are null.</exception>
        </member>
        <member name="M:J832.Common.Extensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns true if <paramref name="source"/> has no items in it; otherwise, false.
            </summary>
            <remarks>
            <para>
                If an <see cref="T:System.Collections.Generic.ICollection`1"/> is provided,
                <see cref="P:System.Collections.Generic.ICollection`1.Count"/> is used.
            </para>
            <para>
                Yes, this does basically the same thing as the
                <see cref="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})"/>
                extention. The differences: 'IsEmpty' is easier to remember and it leverages 
                <see cref="P:System.Collections.Generic.ICollection`1.Count">ICollection.Count</see> if it exists.
            </para>    
            </remarks>
        </member>
        <member name="M:J832.Common.Extensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns the index of the first item in <paramref name="source"/>
                for which <paramref name="predicate"/> returns true. If none, -1.
            </summary>
            <param name="source">The source enumerable.</param>
            <param name="predicate">The function to evaluate on each element.</param>
        </member>
        <member name="M:J832.Common.Extensions.ToReadOnlyCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns a new <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> using the
                contents of <paramref name="source"/>.
            </summary>
            <remarks>
                The contents of <paramref name="source"/> are copied to
                an array to ensure the contents of the returned value
                don't mutate.
            </remarks>
        </member>
        <member name="M:J832.Common.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Performs the specified <paramref name="action"/>  
                on each element of the specified <paramref name="source"/>.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The sequence to which is applied the specified <paramref name="action"/>.</param>
            <param name="action">The action applied to each element in <paramref name="source"/>.</param>
        </member>
        <member name="M:J832.Common.Extensions.RemoveLast``1(System.Collections.Generic.IList{``0})">
            <summary>
                Removes the last element from <paramref name="source"/>.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The list from which to remove the last element.</param>
            <returns>The last element.</returns>
            <remarks><paramref name="source"/> must have at least one element and allow changes.</remarks>
        </member>
        <member name="M:J832.Common.Extensions.EmptyIfNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                If <paramref name="source"/> is null, return an empty <see cref="T:System.Collections.Generic.IEnumerable`1"/>;
                otherwise, return <paramref name="source"/>.
            </summary>
        </member>
        <member name="M:J832.Common.Extensions.SelectRecursive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
                Recursively projects each nested element to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
                and flattens the resulting sequences into one sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">A sequence of values to project.</param>
            <param name="recursiveSelector">A transform to apply to each element.</param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are the
                result of recursively invoking the recursive transform function
                on each element and nested element of the input sequence.
            </returns>
        </member>
        <member name="T:J832.Common.WriteOnce`1">
            <summary>
                A wrapper to ensure strong mutability behavior.
            </summary>
        </member>
        <member name="M:J832.Common.WriteOnce`1.#ctor">
            <summary>
                Creates a new <see cref="T:J832.Common.WriteOnce`1"/> that
                will throw an exception if the value is accesss before Set.
            </summary>
        </member>
        <member name="M:J832.Common.WriteOnce`1.#ctor(System.Boolean)">
            <summary>
                Creates a new <see cref="T:J832.Common.WriteOnce`1"/>.
            </summary>
            <param name="throwIfNotSet">
                true to throw an exception if the value is accessed before set.
                false will cause value access when unset to return the default
                value of T.
            </param>
        </member>
        <member name="M:J832.Common.WriteOnce`1.op_Implicit(J832.Common.WriteOnce{`0})~`0">
            <summary>
                Creates a WriteOnce from a provided value.
            </summary>
        </member>
        <member name="M:J832.Common.WriteOnce`1.op_Implicit(`0)~J832.Common.WriteOnce{`0}">
            <summary>
                The value that has been set.
            </summary>
            <remarks>
                Throw an exception if <see cref="P:J832.Common.WriteOnce`1.IsSet"/> is false 
                and <see cref="P:J832.Common.WriteOnce`1.ThrowsIfNotSet"/> is true.
            </remarks>
        </member>
        <member name="P:J832.Common.WriteOnce`1.IsSet">
            <summary>
                Gets whether the value has been set for this instance.
            </summary>
        </member>
        <member name="P:J832.Common.WriteOnce`1.Value">
            <summary>
                The value that has been set.
            </summary>
            <remarks>
                Throw an exception if <see cref="P:J832.Common.WriteOnce`1.IsSet"/> is false 
                and <see cref="P:J832.Common.WriteOnce`1.ThrowsIfNotSet"/> is true.
            </remarks>
        </member>
        <member name="P:J832.Common.WriteOnce`1.ThrowsIfNotSet">
            <summary>
                Gets whether the implementation will throw
                an exception if the value is accessed before set is called.
            </summary>
        </member>
        <member name="T:J832.Common.ListBase`1">
            <summary>
                Serves as a base implemetation of <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of the item in the list.</typeparam>
        </member>
        <member name="M:J832.Common.ListBase`1.IndexOf(`0)">
            <summary>
                Searches for the specified object and returns the zero-based
                index of the first occurrence within the entire <see cref="T:J832.Common.ListBase`1"/>.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:J832.Common.ListBase`1"/>. 
                The value can be null for reference types.</param>
            <returns>
                The zero-based index of the first occurrence of item within the 
                entire <see cref="T:J832.Common.ListBase`1"/>, if found; otherwise, –1.
            </returns>
        </member>
        <member name="M:J832.Common.ListBase`1.Insert(System.Int32,`0)">
            <exception cref="T:System.NotSupportedException">
                Insert is not directly supported. To add support,
                override in a subclass.
            </exception>
        </member>
        <member name="M:J832.Common.ListBase`1.RemoveAt(System.Int32)">
            <exception cref="T:System.NotSupportedException">
                RemoveAt is not directly supported. To add support,
                override in a subclass.
            </exception>
        </member>
        <member name="M:J832.Common.ListBase`1.GetItem(System.Int32)">
            <summary>
                When overridden in a derived class, provides the item at the 
                specified index;
            </summary>
            <param name="index">The index of the desired item.</param>
            <returns>The item at the provided index.</returns>
        </member>
        <member name="M:J832.Common.ListBase`1.SetItem(System.Int32,`0)">
            <exception cref="T:System.NotSupportedException">
                SetItem is not directly supported. To add support,
                override in a subclass.
            </exception>
        </member>
        <member name="M:J832.Common.ListBase`1.Add(`0)">
            <exception cref="T:System.NotSupportedException">
                Add is not directly supported. To add support,
                override in a subclass.
            </exception>
        </member>
        <member name="M:J832.Common.ListBase`1.Clear">
            <exception cref="T:System.NotSupportedException">
                Clear is not directly supported. To add support,
                override in a subclass.
            </exception>
        </member>
        <member name="M:J832.Common.ListBase`1.Contains(`0)">
            <summary>
                Determines whether an element is in the list.
            </summary>
            <param name="item">
                The object to locate in the list.
                The value can be null for reference types.
            </param>
            <returns>
                true if item is found in the list; otherwise, false.
            </returns>
        </member>
        <member name="M:J832.Common.ListBase`1.CopyTo(`0[],System.Int32)">
            <summary>
                Copies the entire list to a compatible one-dimensional array,
                starting at the specified index of the target array.
            </summary>
            <param name="array">
                The one-dimensional Array that is the destination of the elements copied from list.
                The Array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:J832.Common.ListBase`1.Remove(`0)">
            <exception cref="T:System.NotSupportedException">
                Remove is not directly supported. To add support,
                override in a subclass.
            </exception>
        </member>
        <member name="M:J832.Common.ListBase`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the list.
            </summary>
        </member>
        <member name="M:J832.Common.ListBase`1.CopyTo(System.Array,System.Int32)">
            <summary>
                Copies the entire <see cref="T:J832.Common.ListBase`1"/> to a compatible one-dimensional 
                array, starting at the specified index of the target array.
            </summary>
            <param name="array">
                The one-dimensional Array that is the destination of the elements copied from <see cref="T:J832.Common.ListBase`1"/>.
                The Array must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:J832.Common.ListBase`1.Item(System.Int32)">
            <summary>
                Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:J832.Common.ListBase`1.Count">
            <summary>
                When overridden in a derived class, returns the number of items
                in the list.
            </summary>
            <remarks>The number of items in the list.</remarks>
        </member>
        <member name="P:J832.Common.ListBase`1.IsReadOnly">
            <summary>
                Gets a value representing if the List is read-only.
            </summary>
            <remarks>true if the list is read-only; otherwise, false.</remarks>
        </member>
        <member name="P:J832.Common.ListBase`1.IsFixedSize">
            <summary>
                Gets a value indicating whether the list has a fixed size.
            </summary>
        </member>
        <member name="P:J832.Common.ListBase`1.IsSynchronized">
            <exception cref="T:System.NotSupportedException">
                IsSynchronized is not directly supported. To add support,
                override in a subclass.
            </exception>
        </member>
        <member name="P:J832.Common.ListBase`1.SyncRoot">
            <summary>
                Gets an object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="T:J832.Common.ReaderWriterLockHelper">
            <summary>
                Provides services of <see cref="T:System.Threading.ReaderWriterLockSlim"/>
                with <c>using(){...}</c> semantics.
            </summary>
        </member>
        <member name="M:J832.Common.ReaderWriterLockHelper.GetReadLock">
            <summary>
                Aquires a read lock.
            </summary>
            <returns>An <see cref="T:System.IDisposable"/> that can be used in a C# 'lock' block.</returns>
            <example><code>
            using(lockHelper.GetReadLock())
            {
                //do reading here
            }
            </code></example>
        </member>
        <member name="M:J832.Common.ReaderWriterLockHelper.VerifyReadAccess">
            <summary>
                Throws an exception if <see cref="P:J832.Common.ReaderWriterLockHelper.IsReadLockHeld"/> is false.
            </summary>
            <exception cref="T:System.Exception">If <see cref="P:J832.Common.ReaderWriterLockHelper.IsReadLockHeld"/> is false.</exception>
        </member>
        <member name="M:J832.Common.ReaderWriterLockHelper.GetWriteLock">
            <summary>
                Aquires a write lock.
            </summary>
            <returns>An <see cref="T:System.IDisposable"/> that can be used in a C# 'lock' block.</returns>
            using(lockHelper.GetWriteLock())
            {
                //do reading/writing here
            }
        </member>
        <member name="M:J832.Common.ReaderWriterLockHelper.VerifyWriteAccess">
            <summary>
                Throws an exception if <see cref="P:J832.Common.ReaderWriterLockHelper.IsWriteLockHeld"/> is false.
            </summary>
            <exception cref="T:System.Exception">If <see cref="P:J832.Common.ReaderWriterLockHelper.IsWriteLockHeld"/> is false.</exception>
        </member>
        <member name="M:J832.Common.ReaderWriterLockHelper.Dispose">
            <summary>
                Implementation of <see cref="M:System.IDisposable.Dispose"/>.
                Disposes the nested <see cref="T:System.Threading.ReaderWriterLockSlim"/>.
            </summary>
        </member>
        <member name="P:J832.Common.ReaderWriterLockHelper.IsReadLockHeld">
            <summary>
                Gets a value that indicates whether the current thread has entered the lock in read mode.
            </summary>
            <returns>true if it holds the lock; otherwise, false.</returns>
        </member>
        <member name="P:J832.Common.ReaderWriterLockHelper.IsWriteLockHeld">
            <summary>
                Gets a value that indicates whether the current thread has entered the lock in write mode.
            </summary>
            <returns>true if it holds the lock; otherwise, false.</returns>
        </member>
        <member name="T:J832.Common.ActionOnDispose">
            <summary>
                Provides a wrapper over <see cref="T:System.IDisposable"/> that
                invokes the provided delegate when <see cref="M:System.IDisposable.Dispose"/>
                is called.
            </summary>
            <example>
            <code>
            SqlConnection conn = new SqlConnection(connectionString);
            using(new ActionOnDispose(new Action(conn.Close))
            {
                // Do work here...
                // For cases where you want the connection closed
                // but not disposed
            }
            </code>
            </example>
        </member>
        <member name="M:J832.Common.ActionOnDispose.#ctor(System.Action)">
            <summary>
                Creats a new <see cref="T:J832.Common.ActionOnDispose"/>
                using the provided <see cref="T:System.Action"/>.
            </summary>
            <param name="unlockAction">
                The <see cref="T:System.Action"/> to invoke when <see cref="M:J832.Common.ActionOnDispose.Dispose"/> is called.
            </param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="unlockAction"/> is null.</exception>
        </member>
        <member name="M:J832.Common.ActionOnDispose.Dispose">
            <summary>
                Calls the provided Action if it has not been called; 
                otherwise, throws an <see cref="T:System.Exception"/>.
            </summary>
            <exception cref="T:System.Exception">If <see cref="M:J832.Common.ActionOnDispose.Dispose"/> has already been called.</exception>
        </member>
        <member name="T:J832.Common.Util">
            <summary>
                Contains general helper methods.
            </summary>
        </member>
        <member name="M:J832.Common.Util.Require(System.Boolean)">
            <summary>
                If <paramref name="truth"/> is false, throw an empty <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="truth">The 'truth' to evaluate.</param>
        </member>
        <member name="M:J832.Common.Util.Require(System.Boolean,System.String)">
            <summary>
                If <paramref name="truth"/> is false, throw an 
                <see cref="T:System.InvalidOperationException"/> with the provided <paramref name="message"/>.
            </summary>
            <param name="truth">The 'truth' to evaluate.</param>
            <param name="message">
                The <see cref="P:System.Exception.Message"/> if 
                <paramref name="truth"/> is false.
            </param>
        </member>
        <member name="M:J832.Common.Util.Require(System.Boolean,System.Exception)">
            <summary>
                If <paramref name="truth"/> is false, throws 
                <paramref name="exception"/>.    
            </summary>
            <param name="truth">The 'truth' to evaluate.</param>
            <param name="exception">
                The <see cref="T:System.Exception"/> to throw if <paramref name="truth"/> is false.
            </param>
        </member>
        <member name="M:J832.Common.Util.RequireNotNullOrEmpty(System.String,System.String)">
            <summary>
                Throws an <see cref="T:System.ArgumentNullException"/> if the
                provided string is null.
                Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the
                provided string is empty.
            </summary>
            <param name="stringParameter">The object to test for null and empty.</param>
            <param name="parameterName">The string for the ArgumentException parameter, if thrown.</param>
        </member>
        <member name="M:J832.Common.Util.RequireNotNull(System.Object,System.String)">
            <summary>
                Throws an <see cref="T:System.ArgumentNullException"/> if the
                provided object is null.
            </summary>
            <param name="obj">The object to test for null.</param>
            <param name="parameterName">The string for the ArgumentNullException parameter, if thrown.</param>
        </member>
        <member name="M:J832.Common.Util.RequireArgument(System.Boolean,System.String)">
            <summary>
                Throws an <see cref="T:System.ArgumentException"/> if the provided truth is false.
            </summary>
            <param name="truth">The value assumed to be true.</param>
            <param name="parameterName">The string for <see cref="T:System.ArgumentException"/>, if thrown.</param>
        </member>
        <member name="M:J832.Common.Util.RequireArgument(System.Boolean,System.String,System.String)">
            <summary>
                Throws an <see cref="T:System.ArgumentException"/> if the provided truth is false.
            </summary>
            <param name="truth">The value assumed to be true.</param>
            <param name="paramName">The paramName for the <see cref="T:System.ArgumentException"/>, if thrown.</param>
            <param name="message">The message for <see cref="T:System.ArgumentException"/>, if thrown.</param>
        </member>
        <member name="M:J832.Common.Util.RequireArgumentRange(System.Boolean,System.String)">
            <summary>
                Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the provided truth is false.
            </summary>
            <param name="truth">The value assumed to be true.</param>
            <param name="parameterName">The string for <see cref="T:System.ArgumentOutOfRangeException"/>, if thrown.</param>
        </member>
        <member name="M:J832.Common.Util.RequireArgumentRange(System.Boolean,System.String,System.String)">
            <summary>
                Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the provided truth is false.
            </summary>
            <param name="truth">The value assumed to be true.</param>
            <param name="paramName">The paramName for the <see cref="T:System.ArgumentOutOfRangeException"/>, if thrown.</param>
            <param name="message">The message for <see cref="T:System.ArgumentOutOfRangeException"/>, if thrown.</param>
        </member>
        <member name="M:J832.Common.Util.InterlockedSetIfNotNull``1(``0@,``0)">
            <summary>
                Wraps <see cref="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)"/> 
                for atomically setting null fields.
            </summary>
            <typeparam name="T">The type of the field to set.</typeparam>
            <param name="location">
                The field that, if null, will be set to <paramref name="objectToUse"/>.
            </param>
            <param name="value">
                If <paramref name="location"/> is null, the object to set it to.
            </param>
            <returns>true if <paramref name="location"/> was null and has now been set; otherwise, false.</returns>
        </member>
        <member name="M:J832.Common.Util.IsCriticalException(System.Exception)">
            <summary>
            Returns true if the provided <see cref="T:System.Exception"/> is considered 'critical'
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/> to evaluate for critical-ness.</param>
            <returns>true if the Exception is conisdered critical; otherwise, false.</returns>
            <remarks>
            These exceptions are consider critical:
            <list type="bullets">
                <item><see cref="T:System.OutOfMemoryException"/></item>
                <item><see cref="T:System.StackOverflowException"/></item>
                <item><see cref="T:System.Threading.ThreadAbortException"/></item>
                <item><see cref="T:System.Runtime.InteropServices.SEHException"/></item>
            </list>
            </remarks>
        </member>
        <member name="T:J832.Common.CastList`2">
            <summary>
                A wrapper around an <see cref="T:System.Collections.Generic.IList`1"/>
                which projects the contents as a read-only <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="TFrom">The type of the source <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="TTo">
                The type of the target <see cref="T:System.Collections.Generic.IList`1"/>
                Must be assignable from <paramref name="TFrom"/>.
            </typeparam>
            <remarks>
                Like <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>, this class
                is a wrapper. Changes to the source collection will
                be reflected.
            </remarks>
        </member>
        <member name="M:J832.Common.CastList`2.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
                Creats a new <see cref="T:J832.Common.CastList`2"/>.
            </summary>
            <param name="from">The source collection.</param>
        </member>
        <member name="M:J832.Common.CastList`2.GetItem(System.Int32)">
            <summary>
                Gets the element at the specified index.
            </summary>
        </member>
        <member name="P:J832.Common.CastList`2.Count">
            <summary>
                Gets the number of contained elements.
            </summary>
        </member>
    </members>
</doc>
